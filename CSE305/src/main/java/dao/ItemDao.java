package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Item;

public class ItemDao {

    /*
    * The students code to fetch data from the database will be written here
    * Query to fetch details of all the items has to be implemented
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
     */
    public List<Item> getItems() throws SQLException {

        // Connection
        Connection connection = ConnectionUtils.getMyConnection();

        Statement statement = connection.createStatement();

        String sql = "SELECT ItemID, Description, ItemType, ItemName, Quantity FROM Item";

        ResultSet rs = statement.executeQuery(sql);

        List<Item> items = new ArrayList<Item>();

        while (rs.next()) {
            int itemID = rs.getInt("ItemID");
            String description = rs.getString("Description");
            String type = rs.getString("ItemType");
            String name = rs.getString("ItemName");
            int quantity = rs.getInt("Quantity");

            Item item = new Item();
            item.setItemID(itemID);
            item.setDescription(description);
            item.setType(type);
            item.setName(name);
            item.setNumInStock(quantity);
            items.add(item);
        }

        return items;

    }

    /*
    * The students code to fetch data from the database will be written here
    * Query to fetch details of the bestseller items has to be implemented
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
     */
    public List<Item> getBestsellerItems() {

//		List<Item> items = new ArrayList<Item>();
//		
//		
//		/*Sample data begins*/
//		for (int i = 0; i < 5; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(2);
//			items.add(item);
//		}
//		/*Sample data ends*/
//		
//		return items;
        return null;
    }

    public List<Item> getSummaryListing(String searchKeyword) throws SQLException {

        /*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
         */
        // Connection
        Connection connection = ConnectionUtils.getMyConnection();

        // SQL
        String sql = "";

        // Prepared statement
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setInt(1, 1001);

        ResultSet rs = statement.executeQuery(sql);

        List<Item> items = new ArrayList<Item>();

        while (rs.next()) {

        }

        return items;

    }

    public List<Item> getItemSuggestions(String customerID) {

        /*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
         */
//		List<Item> items = new ArrayList<Item>();
//		
//		/*Sample data begins*/
//		for (int i = 0; i < 4; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(2);
//			items.add(item);
//		}
//		/*Sample data ends*/
//		
//		return items;
        return null;
    }

    public List getItemsBySeller(String sellerID) {

        /*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
         */
//		List output = new ArrayList();
//		List<Item> items = new ArrayList<Item>();
//		List<Bid> bids = new ArrayList<Bid>();
//		List<Auction> auctions = new ArrayList<Auction>();
//		
//		/*Sample data begins*/
//		for (int i = 0; i < 4; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			items.add(item);
//			
//			Bid bid = new Bid();
//			bid.setCustomerID("123-12-1234");
//			bid.setBidPrice(120);
//			bids.add(bid);
//			
//			Auction auction = new Auction();
//			auction.setMinimumBid(100);
//			auction.setBidIncrement(10);
//			auction.setAuctionID(123);
//			auctions.add(auction);
//		}
//		/*Sample data ends*/
//		
//		output.add(items);
//		output.add(bids);
//		output.add(auctions);
//		
//		return output;
        return null;
    }

    public List<Item> getItemTypes() {

        /*
		 * The students code to fetch data from the database will be written here
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * A query to fetch the unique item types has to be implemented
		 * Each item type is to be added to the "item" object using setType method
         */
        List<Item> items = new ArrayList<Item>();

        /*Sample data begins*/
        for (int i = 0; i < 6; i++) {
            Item item = new Item();
            item.setType("BOOK");
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }

    public List getItemsByName(String itemName) {

        /*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
         */
//		List output = new ArrayList();
//		List<Item> items = new ArrayList<Item>();
//		List<Auction> auctions = new ArrayList<Auction>();
//		
//		/*Sample data begins*/
//		for (int i = 0; i < 4; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			items.add(item);
//			
//			Auction auction = new Auction();
//			auction.setMinimumBid(100);
//			auction.setBidIncrement(10);
//			auctions.add(auction);
//		}
//		/*Sample data ends*/
//		
//		output.add(items);
//		output.add(auctions);
//		
//		return output;
        return null;
    }

    public List getItemsByType(String itemType) {

        /*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
         */
//		List output = new ArrayList();
//		List<Item> items = new ArrayList<Item>();
//		List<Auction> auctions = new ArrayList<Auction>();
//				
//		/*Sample data begins*/
//		for (int i = 0; i < 4; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			items.add(item);
//			
//			Auction auction = new Auction();
//			auction.setMinimumBid(100);
//			auction.setBidIncrement(10);
//			auctions.add(auction);
//		}
//		/*Sample data ends*/
//		
//		output.add(items);
//		output.add(auctions);
//		
//		return output;
        return null;
    }

    public List<Item> getBestsellersForCustomer(String customerID) {

        /*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
         */
//		List<Item> items = new ArrayList<Item>();
//				
//		/*Sample data begins*/
//		for (int i = 0; i < 6; i++) {
//			Item item = new Item();
//			item.setItemID(123);
//			item.setDescription("sample description");
//			item.setType("BOOK");
//			item.setName("Sample Book");
//			item.setNumCopies(50);
//			items.add(item);
//		}
//		/*Sample data ends*/
//		
//		return items;
        return null;
    }

}
