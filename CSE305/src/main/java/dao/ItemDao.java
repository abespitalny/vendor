package dao;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.internal.compiler.ast.Statement;

import com.mysql.cj.x.protobuf.MysqlxDatatypes.Scalar.String;

import model.Auction;
import model.Item;

public class ItemDao {

	public List<Item> getItems() {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * Query to fetch details of all the items has to be implemented
		 * 
		 * Each record is required to be encapsulated as a "Item" class object
		 * and added to the "items" List
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT\r\n" +
				"        ItemID,\r\n" +
				"        Description,\r\n" +
				"        ItemType,\r\n" +
				"        ItemName,\r\n" +
				"        Quantity\r\n" +
				"    FROM\r\n" +
				"        Item";

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			int numCopies = rs.getInt(5);

			// Add data to auction
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			item.setNumCopies(numCopies);
			items.add(item);
		}

		return items;
	}

	////////////////////////////////////////
	// TODO: I have to rewrite the query. This is not correct
	public List<Item> getBestsellerItems() {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * Query to fetch details of the bestseller items has to be implemented
		 * 
		 * Each record is required to be encapsulated as a "Item" class object
		 * and added to the "items" List
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT\r\n" +
				"        ItemID,\r\n" +
				"        Description,\r\n" +
				"        ItemType,\r\n" +
				"        ItemName,\r\n" +
				"        Quantity\r\n" +
				"    FROM\r\n" +
				"        Item\r\n" +
				"    ORDER BY\r\n" +
				"        Quantity DESC";

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			int numCopies = rs.getInt(5);

			// Add data to auction
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			item.setNumCopies(numCopies);
			items.add(item);
		}

		return items;
	}

	public List<Item> getSummaryListing(String searchKeyword) {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * Query to fetch details of summary listing of revenue generated by a
		 * particular item or item type must be implemented
		 * 
		 * Each record is required to be encapsulated as a "Item" class object
		 * and added to the "items" ArrayList
		 * 
		 * Store the revenue generated by an item in the soldPrice attribute,
		 * using setSoldPrice method of each "item" object
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT\r\n" +
				"        I.ItemID,\r\n" +
				"        I.Description,\r\n" +
				"        I.ItemType,\r\n" +
				"        I.ItemName,\r\n" +
				"        SUM(A.CurrentHighestBidPrice) AS TotalRevenue\r\n" +
				"    FROM\r\n" +
				"        Auction A,\r\n" +
				"        Item I,\r\n" +
				"        Post P\r\n" +
				"    WHERE\r\n" +
				"		(I.ItemType = 'searchKeyword' OR\r\n" +
				"        I.ItemName = 'searchKeyword') AND\r\n" +
				"		I.ItemID = A.ItemID AND\r\n" +
				"		A.AuctionID = P.AuctionID AND\r\n" +
				"		P.EndDate < NOW()";

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			int soldPrice = rs.getInt(5);

			// Add data to auction
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			item.setSoldPrice(soldPrice);
			items.add(item);
		}

		return items;
	}

	/////////////////////////////////////////////////////////
	// TODO: The query needs to be reformatteds
	public List<Item> getItemSuggestions(String customerID) {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * Query to fetch item suggestions for a customer, indicated by
		 * customerID, must be implemented
		 * 
		 * customerID, which is the Customer's ID for whom the item suggestions
		 * are fetched, is given as method parameter
		 * 
		 * Each record is required to be encapsulated as a "Item" class object
		 * and added to the "items" ArrayList
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT \r\n" +
				"		AuctionID, \r\n" +
				"        MinBidPrice, \r\n" +
				"        IF(ReservePrice IS NULL, 0, IF(CurrentMaxBidPrice >= ReservePrice, 1, 2)) AS ReserveStatus, CurrentHighestBidPrice, NumCopies, ItemID, ItemName, ItemType, Description, OpenDate, EndDate\r\n"
				+
				"	FROM \r\n" +
				"		(Auction NATURAL JOIN Item) NATURAL JOIN Post\r\n" +
				"	WHERE \r\n" +
				"		ItemType = ? AND OpenDate <= NOW() AND NOW() < EndDate";

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			int numCopies = rs.getInt(5);

			// Add data to auction
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			item.setNumCopies(numCopies);
			items.add(item);
		}

		return items;
	}

	/////////////////////////////////////////////
	// TODO: Is this signature correct? Does List need a type?
	public List getItemsBySeller(String sellerID) {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * Query to fetch items sold by a given seller, indicated by sellerID,
		 * must be implemented
		 * 
		 * sellerID, which is the Sellers's ID who's items are fetched, is given
		 * as method parameter
		 * 
		 * The bid and auction details of each of the items should also be
		 * fetched
		 * 
		 * The bid details must have the highest current bid for the item
		 * 
		 * The auction details must have the details about the auction in which
		 * the item is sold
		 * 
		 * Each item record is required to be encapsulated as a "Item" class
		 * object and added to the "items" List
		 * 
		 * Each bid record is required to be encapsulated as a "Bid" class
		 * object and added to the "bids" List
		 * 
		 * Each auction record is required to be encapsulated as a "Auction"
		 * class object and added to the "auctions" List
		 * 
		 * The items, bids and auctions Lists have to be added to the "output"
		 * List and returned
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT \r\n" +
				"		 I.ItemID, \r\n" +
				"        I.Description, \r\n" +
				"		 I.ItemType, \r\n" +
				"        I.ItemName \r\n" +
				"	FROM \r\n" +
				"		Auction A, \r\n" +
				"        Item I, \r\n" +
				"        Post P\r\n" +
				"	WHERE \r\n" +
				"		A.ItemID = I.ItemID AND \r\n" +
				"        A.AuctionID = P.AuctionID AND \r\n" +
				"        P.CustomerID = " + sellerID;

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);

			// Add data to auction
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			items.add(item);
		}

		return items;
	}

	public List<Item> getItemTypes() {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * Each record is required to be encapsulated as a "Item" class object
		 * and added to the "items" ArrayList
		 * 
		 * A query to fetch the unique item types has to be implemented
		 * 
		 * Each item type is to be added to the "item" object using setType
		 * method
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT\r\n" +
				"        DISTINCT(ItemType)\r\n" +
				"    FROM \r\n" +
				"        Item;";

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			String type = rs.getString(1);

			// Add data to auction
			Item item = new Item();
			item.setType(type);
			items.add(item);
		}

		return items;
	}

	/////////////////////////////////////////////
	// TODO: Is this signature correct? Does List need a type?
	public List getItemsByName(String itemName) {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * The itemName, which is the item's name on which the query has to be
		 * implemented, is given as method parameter
		 * 
		 * Query to fetch items containing itemName in their name has to be
		 * implemented
		 * 
		 * Each item's corresponding auction data also has to be fetched
		 * 
		 * Each item record is required to be encapsulated as a "Item" class
		 * object and added to the "items" List
		 * 
		 * Each auction record is required to be encapsulated as a "Auction"
		 * class object and added to the "auctions" List
		 * 
		 * The items and auctions Lists are to be added to the "output" List and
		 * returned
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT\r\n" +
				"        I.ItemID,\r\n" +
				"        I.Description,\r\n" +
				"        I.ItemType,\r\n" +
				"        I.ItemName,\r\n" +
				"        A.MinBidPrice,\r\n" +
				"        A.BidIncrement\r\n" +
				"    FROM\r\n" +
				"        Item I,\r\n" +
				"        Auction A\r\n" +
				"    WHERE\r\n" +
				"        ItemName LIKE '%" + itemName + "%' AND\r\n" +
				"        I.ItemID = A.ItemID";

		ResultSet rs = statement.executeQuery(sql);

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			float minBidPrice = rs.getDouble(5);
			float bidIncrement = rs.getDouble(6);

			// Add data to item
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			items.add(item);

			// Add data to auction
			Auction auction = new Auction();
			auction.setMinimumBid(minBidPrice);
			auction.setBidIncrement(bidIncrement);
			auctions.add(auction);
		}

		output.add(items);
		output.add(auctions);

		return output;
	}

	/////////////////////////////////////////////
	// TODO: Is this signature correct? Does List need a type?
	public List getItemsByType(String itemType) {
		/*
		 * The students code to fetch data from the database will be written
		 * here
		 * 
		 * The itemType, which is the item's type on which the query has to be
		 * implemented, is given as method parameter
		 * 
		 * Query to fetch items containing itemType as their type has to be
		 * implemented
		 * 
		 * Each item's corresponding auction data also has to be fetched
		 * 
		 * Each item record is required to be encapsulated as a "Item" class
		 * object and added to the "items" List
		 * 
		 * Each auction record is required to be encapsulated as a "Auction"
		 * class object and added to the "auctions" List
		 * 
		 * The items and auctions Lists are to be added to the "output" List and
		 * returned
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "SELECT\r\n" +
				"        I.ItemID,\r\n" +
				"        I.Description,\r\n" +
				"        I.ItemType,\r\n" +
				"        I.ItemName,\r\n" +
				"        A.MinBidPrice,\r\n" +
				"        A.BidIncrement\r\n" +
				"    FROM\r\n" +
				"        Item I,\r\n" +
				"        Auction A\r\n" +
				"    WHERE\r\n" +
				"        ItemType LIKE '%" + itemType + "%' AND\r\n" +
				"        I.ItemID = A.ItemID";

		ResultSet rs = statement.executeQuery(sql);

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			float minBidPrice = rs.getDouble(5);
			float bidIncrement = rs.getDouble(6);

			// Add data to item
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			items.add(item);

			// Add data to auction
			Auction auction = new Auction();
			auction.setMinimumBid(minBidPrice);
			auction.setBidIncrement(bidIncrement);
			auctions.add(auction);
		}

		output.add(items);
		output.add(auctions);

		return output;
	}

	////////////////////////////////////////////////////////////////
	// TODO: Write the SQL. I'm not sure as to what exactly is to be requested.
	public List<Item> getBestsellersForCustomer(String customerID) {
		/*
		 * The students code to fetch data from the database will be written
		 * here.
		 * 
		 * Each record is required to be encapsulated as a "Item" class object
		 * and added to the "items" ArrayList.
		 * 
		 * Query to get the Best-seller list of items for a particular customer,
		 * indicated by the customerID, has to be implemented
		 * 
		 * The customerID, which is the customer's ID for whom the Best-seller
		 * items have to be fetched, is given as method parameter
		 */

		// Get connection
		Connection connection = ConnectionUtils.getMyConnection();

		// Create statement
		Statement statement = connection.createStatement();

		String sql = "";

		ResultSet rs = statement.executeQuery(sql);

		List<Item> items = new ArrayList<Item>();

		while (rs.next()) {
			// Pull data from database
			int itemID = rs.getInt(1);
			String description = rs.getString(2);
			String type = rs.getString(3);
			String name = rs.getString(4);
			int numCopies = rs.getInt(5);

			// Add data to auction
			Item item = new Item();
			item.setItemID(itemID);
			item.setDescription(description);
			item.setType(type);
			item.setName(name);
			item.setNumCopies(numCopies);

			items.add(item);
		}

		return items;
	}

}
