package dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Auction;
import model.Bid;

import model.Item;

public class ItemDao {

    /*
    * The students code to fetch data from the database will be written here
    * Query to fetch details of all the items has to be implemented
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
     */
    public List<Item> getItems() {

        List<Item> items = new ArrayList<Item>();
        String sql = "SELECT ItemID, Description, ItemType, ItemName, Quantity FROM Item";

        try {
            Connection connection = ConnectionUtils.getMyConnection();
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                int quantity = rs.getInt("Quantity");

                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                item.setNumInStock(quantity);
                items.add(item);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        return items;

    }

    /*
    * The students code to fetch data from the database will be written here
    * Query to fetch details of the bestseller items has to be implemented
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
     */
    public List<Item> getBestsellerItems() {
        List<Item> items = new ArrayList<Item>();
        String sql = "SELECT ItemID, ItemName, NumSold "
                + "FROM Item "
                + "ORDER BY NumSold DESC";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            Statement statement = connection.createStatement();

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                int quantity = rs.getInt("Quantity");

                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                item.setNumInStock(quantity);
                items.add(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        return items;
    }

    /*
        * The students code to fetch data from the database will be written here
        * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
        * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
        * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
     */
    public List<Item> getSummaryListing(String searchKeyword) {
        List<Item> items = new ArrayList<Item>();
        String sql = "SELECT"
                + "        I.ItemID,"
                + "        I.Description,"
                + "        I.ItemType,"
                + "        I.ItemName,"
                + "        SUM(A.CurrentHighestBidPrice) AS TotalRevenue"
                + "    FROM"
                + "        Auction A,"
                + "        Item I,"
                + "        Post P"
                + "    WHERE"
                + "		(I.ItemType = ? OR"
                + "        I.ItemName = ?) AND"
                + "		I.ItemID = A.ItemID AND"
                + "		A.EndDate < NOW()";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            // Prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, searchKeyword);
            statement.setString(2, searchKeyword);

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                // Pull data from database
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                BigDecimal totalRevenue = new BigDecimal(rs.getInt("TotalRevenue"));

                // Add data to auction
                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                item.setSoldPrice(totalRevenue);
                items.add(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        return items;

    }

    /*
    * The students code to fetch data from the database will be written here
    * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
    * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
     */
    public List<Item> getItemSuggestions(String customerID) {
        List<Item> items = new ArrayList<Item>();
        String sql = "SELECT ItemID, ItemName, ItemType, Description, Quantity "
                + "FROM (Auction INNER JOIN Bid ON WinningBidID = BidID) INNER JOIN Item USING (ItemID) "
                + "WHERE CustomerID = ? AND Quantity > 0";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            // Prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, customerID);

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                // Pull data from database
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                int numInStock = rs.getInt("Quantity");

                // Add data to auction
                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                item.setNumInStock(numInStock);
                items.add(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        return items;

    }

    /*
    * The students code to fetch data from the database will be written here
    * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
    * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
    * The bid and auction details of each of the items should also be fetched
    * The bid details must have the highest current bid for the item
    * The auction details must have the details about the auction in which the item is sold
    * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
    * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
    * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
    * The items, bids and auctions Lists have to be added to the "output" List and returned
     */
    public List getItemsBySeller(String sellerID) {
        List output = new ArrayList();
        List<Item> items = new ArrayList<Item>();
        List<Bid> bids = new ArrayList<Bid>();
        List<Auction> auctions = new ArrayList<Auction>();
        String sql = "SELECT I.ItemID, I.Description, I.ItemType, I.ItemName, B.CustomerID, "
                + "B.BidPrice, A.MinBidPrice, A.BidIncrement, A.AuctionID "
                + "FROM I.Item, A.Auction, B.Bid "
                + "WHERE A.AuctionID = B.AuctionID AND A.ItemID = I.ItemID AND A.Seller = ?";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            // Prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, sellerID);

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                // Pull data from database
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                String customerID = rs.getString("CustomerID");
                BigDecimal bidPrice = new BigDecimal(rs.getFloat("BidPrice"));
                BigDecimal minBidPrice = new BigDecimal(rs.getFloat("MinBidPrice"));
                BigDecimal bidIncrement = new BigDecimal(rs.getFloat("BidIncrement"));
                int auctionID = rs.getInt("AuctionID");

                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                items.add(item);

                Bid bid = new Bid();
                bid.setCustomerID(customerID);
                bid.setBidPrice(bidPrice);
                bids.add(bid);

                Auction auction = new Auction();
                auction.setMinBidPrice(minBidPrice);
                auction.setBidIncrement(bidIncrement);
                auction.setAuctionID(auctionID);
                auctions.add(auction);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        output.add(items);
        output.add(bids);
        output.add(auctions);

        return output;
    }

    /*
    * The students code to fetch data from the database will be written here
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
    * A query to fetch the unique item types has to be implemented
    * Each item type is to be added to the "item" object using setType method
     */
    public List<Item> getItemTypes() throws SQLException {
        List<Item> items = new ArrayList<Item>();
        String sql = "SELECT"
                + "        DISTINCT(ItemType)"
                + "    FROM "
                + "        Item";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            Statement statement = connection.createStatement();

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                String type = rs.getString("ItemType");

                Item item = new Item();
                item.setType(type);
                items.add(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        return items;

    }

    /*
    * The students code to fetch data from the database will be written here
    * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
    * Query to fetch items containing itemName in their name has to be implemented
    * Each item's corresponding auction data also has to be fetched
    * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
    * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
    * The items and auctions Lists are to be added to the "output" List and returned
     */
    public List getItemsByName(String itemName) {
        List output = new ArrayList();
        List<Item> items = new ArrayList<Item>();
        List<Auction> auctions = new ArrayList<Auction>();
        String sql = "SELECT"
                + "        I.ItemID,"
                + "        I.Description,"
                + "        I.ItemType,"
                + "        I.ItemName,"
                + "        A.MinBidPrice,"
                + "        A.BidIncrement"
                + "    FROM"
                + "        Item I,"
                + "        Auction A"
                + "    WHERE"
                + "        ItemName LIKE '%?%' AND"
                + "        I.ItemID = A.ItemID";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            // Prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, itemName);

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                // Pull data from database
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                BigDecimal minBidPrice = new BigDecimal(rs.getFloat("MinBidPrice"));
                BigDecimal bidIncrement = new BigDecimal(rs.getFloat("BidIncrement"));

                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                items.add(item);

                Auction auction = new Auction();
                auction.setMinBidPrice(minBidPrice);
                auction.setBidIncrement(bidIncrement);
                auctions.add(auction);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        output.add(items);
        output.add(auctions);

        return output;

    }

    /*
    * The students code to fetch data from the database will be written here
    * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
    * Query to fetch items containing itemType as their type has to be implemented
    * Each item's corresponding auction data also has to be fetched
    * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
    * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
    * The items and auctions Lists are to be added to the "output" List and returned
     */
    public List getItemsByType(String itemType) {
        List output = new ArrayList();
        List<Item> items = new ArrayList<Item>();
        List<Auction> auctions = new ArrayList<Auction>();
        String sql = "SELECT"
                + "        I.ItemID,"
                + "        I.Description,"
                + "        I.ItemType,"
                + "        I.ItemName,"
                + "        A.MinBidPrice,"
                + "        A.BidIncrement"
                + "    FROM"
                + "        Item I,"
                + "        Auction A"
                + "    WHERE"
                + "        ItemType LIKE '%?%' AND"
                + "        I.ItemID = A.ItemID";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            // Prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, itemType);

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                // Pull data from database
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                BigDecimal minBidPrice = new BigDecimal(rs.getFloat("MinBidPrice"));
                BigDecimal bidIncrement = new BigDecimal(rs.getFloat("BidIncrement"));

                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                items.add(item);

                Auction auction = new Auction();
                auction.setMinBidPrice(minBidPrice);
                auction.setBidIncrement(bidIncrement);
                auctions.add(auction);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        output.add(items);
        output.add(auctions);

        return output;
    }

    /*
    * The students code to fetch data from the database will be written here.
    * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
    * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
    * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
     */
    public List<Item> getBestsellersForCustomer(String customerID) {

        List<Item> items = new ArrayList<Item>();
        String sql = "";

        try {
            Connection connection = ConnectionUtils.getMyConnection();

            // Prepared statement
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, customerID);

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                // Pull data from database
                int itemID = rs.getInt("ItemID");
                String description = rs.getString("Description");
                String type = rs.getString("ItemType");
                String name = rs.getString("ItemName");
                int numInStock = rs.getInt("Quantity");

                // Add data to auction
                Item item = new Item();
                item.setItemID(itemID);
                item.setDescription(description);
                item.setType(type);
                item.setName(name);
                item.setNumInStock(numInStock);
                items.add(item);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ItemDao.class.getName()).log(Level.SEVERE, null, ex);
        }

        return items;

    }

}
