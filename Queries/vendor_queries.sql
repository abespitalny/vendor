-- Manager Level Transactions

-- Add new employee
INSERT INTO VendorUser VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT INTO Employee VALUES (?, ?, CURDATE(), ?, ?);

-- Managers can only edit the info. of customer representatives
UPDATE VendorUser INNER JOIN Employee ON Username = EmployeeID
SET Username = ?,
    UserPassword = ?,
    FirstName = ?,
    LastName = ?,
    Address = ?,
    City = ?,
    State = ?,
    ZipCode = ?,
    Telephone = ?,
    Email = ?,
    SSN = ?,
    HourlyRate = ?
WHERE
    Username = ? AND EmployeeLevel = 'CustomerRep';

-- Employees, managers or customer representatives, can edit their own information
UPDATE VendorUser INNER JOIN Employee ON Username = EmployeeID
SET FirstName = ?,
    LastName = ?,
    Address = ?,
    City = ?,
    State = ?,
    ZipCode = ?,
    Telephone = ?,
    Email = ?,
    SSN = ?
WHERE 
    Username = ?;

-- Managers can delete customer representatives
DELETE FROM VendorUser INNER JOIN Employee ON Username = EmployeeID
WHERE Username = ? AND EmployeeLevel = 'CustomerRep';

-- Obtain a sales report for a particular month
SELECT AuctionID, ItemName, CurrentHighestBidPrice AS SoldPrice
FROM Auction INNER JOIN Item USING (ItemID)
WHERE MONTH(EndDate) = ? AND SaleStatus = 'Paid';

-- Produce a comprehensive listing of all items
SELECT *
FROM (Item LEFT JOIN
(SELECT ItemID, COUNT(*) AS NumAuctionsSold,
        FORMAT(MAX(CurrentHighestBidPrice / NumCopies), 2) AS MaxSoldPrice,
        FORMAT(MIN(CurrentHighestBidPrice / NumCopies), 2) AS MinSoldPrice,
        FORMAT(AVG(CurrentHighestBidPrice / NumCopies), 2) AS AvgSoldPrice,
        SUM(CurrentHighestBidPrice) AS TotalRevenue
 FROM Auction
 WHERE SaleStatus = 'Paid' GROUP BY ItemID
) AS A1 USING (ItemID)) LEFT JOIN
(SELECT ItemID, COUNT(*) AS NumAuctionsActive
 FROM Auction
 WHERE EndDate < NOW() GROUP BY ItemID
) AS A2 USING (ItemID);

-- Produce a list of sales by item name
SELECT AuctionID, ItemName, CurrentHighestBidPrice AS SoldPrice
FROM Auction INNER JOIN Item USING (ItemID)
WHERE ItemName LIKE CONCAT('%', ?, '%') AND SaleStatus = 'Paid';

-- Produce a list of sales by seller name
SELECT AuctionID, Seller, FirstName, LastName, CurrentHighestBidPrice AS SoldPrice
FROM Auction AS A INNER JOIN VendorUser AS V ON A.Seller = V.Username
WHERE (FirstName LIKE CONCAT('%', ?, '%') OR LastName LIKE CONCAT('%', ?, '%')) AND SaleStatus = 'Paid';

-- Produce a list of sales by buyer name
SELECT A.AuctionID, B.CustomerID AS Buyer, FirstName, LastName, CurrentHighestBidPrice AS SoldPrice
FROM (Auction AS A INNER JOIN Bid AS B ON A.WinningBidID = B.BidID) INNER JOIN VendorUser AS V ON B.CustomerID = V.Username 
WHERE (FirstName LIKE CONCAT('%', ?, '%') OR LastName LIKE CONCAT('%', ?, '%')) AND SaleStatus = 'Paid';

-- Produce a summary listing of revenue generated by a particular item ID
SELECT ItemID, ItemName, ItemType, Description, TotalRevenue
FROM Item LEFT JOIN
(SELECT ItemID, SUM(CurrentHighestBidPrice) AS TotalRevenue
 FROM Auction
 WHERE SaleStatus = 'Paid' GROUP BY ItemID
) AS A USING (ItemID)
WHERE ItemID = ?;

-- Produce a summary listing of revenue generated by a particular item type
SELECT ItemID, ItemName, ItemType, Description, TotalRevenue
FROM Item LEFT JOIN
(SELECT ItemID, SUM(CurrentHighestBidPrice) AS TotalRevenue
 FROM Auction
 WHERE SaleStatus = 'Paid' GROUP BY ItemID
) AS A USING (ItemID)
WHERE ItemType = ?;

-- Produce a summary listing of revenue generated by a particular Seller
SELECT Seller, FirstName, LastName, SUM(CurrentHighestBidPrice) AS TotalRevenue
FROM Auction AS A INNER JOIN VendorUser AS V ON A.Seller = V.Username
WHERE Seller = ? AND SaleStatus = 'Paid' GROUP BY Seller;

-- Determine which customer representative generated the most total revenue
-- Note: I needed the subquery since there could possibly be multiple customer reps that tie for the highest revenue
SELECT Monitor, FirstName, LastName, Email, SUM(CurrentHighestBidPrice) AS HighestRevenue
FROM Auction AS A INNER JOIN VendorUser AS V ON A.Monitor = V.Username
WHERE SaleStatus = 'Paid' GROUP BY Monitor
HAVING HighestRevenue = (SELECT SUM(CurrentHighestBidPrice) AS TotalRevenue
                         FROM Auction 
                         WHERE SaleStatus = 'Paid' GROUP BY Monitor
                         ORDER BY TotalRevenue DESC LIMIT 1);

-- Determine which Seller generated most total revenue
SELECT Seller, FirstName, LastName, Email, SUM(CurrentHighestBidPrice) AS HighestRevenue
FROM Auction AS A INNER JOIN VendorUser AS V ON A.Seller = V.Username
WHERE SaleStatus = 'Paid' GROUP BY Seller
HAVING HighestRevenue = (SELECT SUM(CurrentHighestBidPrice) AS TotalRevenue
                         FROM Auction 
                         WHERE SaleStatus = 'Paid' GROUP BY Seller
                         ORDER BY TotalRevenue DESC LIMIT 1);

-- Produce a best-sellers list of items
SELECT ItemID, ItemName, NumSold
FROM Item
ORDER BY NumSold DESC LIMIT ?;


-- Customer-representative Level Transactions

-- Record a sale
UPDATE Auction SET SaleStatus = 'Pending' WHERE AuctionID = ?;

-- Show list of all auctions to be recorded - this is what the manager should see
SELECT A.AuctionID, ItemID, CustomerID AS WinningBidder, BidTime, BidPrice, CurrentHighestBidPrice AS SoldPrice, Monitor
FROM Auction AS A INNER JOIN Bid AS B ON A.WinningBidID = B.BidID
WHERE EndDate <= NOW() AND WinningBidID IS NOT NULL AND SaleStatus IS NULL;

-- Show list of auctions to be recorded by appropriate customer rep.
SELECT A.AuctionID, ItemID, CustomerID AS WinningBidder, BidTime, BidPrice, CurrentHighestBidPrice AS SoldPrice
FROM Auction AS A INNER JOIN Bid AS B ON A.WinningBidID = B.BidID
WHERE EndDate <= NOW() AND WinningBidID IS NOT NULL AND SaleStatus IS NULL AND Monitor = ?;

-- Show all auctions pending payment, paid, or cancelled - what the manager sees
SELECT A.AuctionID, ItemID, CustomerID AS WinningBidder, BidTime, BidPrice, CurrentHighestBidPrice AS SoldPrice, Monitor
FROM Auction AS A INNER JOIN Bid AS B ON A.WinningBidID = B.BidID
WHERE SaleStatus = ?;

-- Show list of auctions pending payment, paid, or cancelled where the customer rep. is a monitor on the auction
SELECT A.AuctionID, ItemID, CustomerID AS WinningBidder, BidTime, BidPrice, CurrentHighestBidPrice AS SoldPrice
FROM Auction AS A INNER JOIN Bid AS B ON A.WinningBidID = B.BidID
WHERE SaleStatus = ? AND Monitor = ?;

-- Show list of auctions pending payment to the winning bidder
SELECT A.AuctionID, ItemName, NumCopies, CurrentHighestBidPrice AS SoldPrice
FROM (Auction AS A INNER JOIN Bid AS B ON A.WinningBidID = B.BidID) INNER JOIN Item USING (ItemID)
WHERE CustomerID = ? AND SaleStatus = 'Pending';

-- Customer pays for Auction. The number of ItemsSold and ItemsPurchased should be updated as well
UPDATE (((Auction AS A INNER JOIN Customer AS C1 ON A.Seller = C1.CustomerID) INNER JOIN Item USING (ItemID))
    INNER JOIN Bid AS B ON A.WinningBidID = B.BidID)
    INNER JOIN Customer AS C2 ON B.CustomerID = C2.CustomerID
SET C1.ItemsSold = C1.ItemsSold + 1,
    C2.ItemsPurchased = C2.ItemsPurchased + 1,
    NumSold = NumSold + NumCopies,
    Quantity = Quantity - NumCopies,
    SaleStatus = 'Paid'
WHERE A.AuctionID = ?;

-- Customer cancels Auction
UPDATE Auction SET SaleStatus = 'Cancelled' WHERE AuctionID = ?;

-- Add a customer
INSERT INTO VendorUser VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
INSERT INTO Customer (CustomerID, Rating, CreditCardNum) VALUES (?, ?, ?);

-- Edit a customer
UPDATE VendorUser INNER JOIN Customer ON Username = CustomerID
SET Username = ?,
    UserPassword = ?,
    FirstName = ?,
    LastName = ?,
    Address = ?,
    City = ?,
    State = ?,
    ZipCode = ?,
    Telephone = ?,
    Email = ?,
    Rating = ?,
    CreditCardNum = ?
WHERE Username = ?;

-- Delete a customer
DELETE FROM VendorUser WHERE Username = ?;

-- Produce a customer mailing list
SELECT CustomerID, FirstName, LastName, Address, City, State, ZipCode, Email
FROM VendorUser INNER JOIN Customer ON Username = CustomerID;

-- Produce a list of item suggestions for a given customer based on that customer's past purchases
-- Show the purchase history for a given customer where there is greater than 0 quantity on the item which means that there are active auctions
-- on the item
SELECT ItemID, ItemName, ItemType, Description, Quantity
FROM (Auction INNER JOIN Bid ON WinningBidID = BidID) INNER JOIN Item USING (ItemID)
WHERE CustomerID = ? AND Quantity > 0;

INSERT INTO ItemSuggestion VALUES (?, ?);

-- When the customer views the suggestions and presses 'Dismiss all' then the suggestions will be deleted from the table
DELETE FROM ItemSuggestion WHERE CustomerID = ?;

-- Customer Level Transactions

-- Place bid
-- Transaction starts here
INSERT INTO Bid
SELECT ? AS CustomerID, AuctionID, NOW() AS BidTime, ? AS BidPrice
FROM Auction
WHERE AuctionID = ? AND IF(CurrentHighestBidPrice IS NULL, ? >= MinBidPrice, ? > CurrentHighestBidPrice);
    
-- If the bid is not inserted into the Bid table above then do not
-- proceed and rollback the transaction

-- Assuming that BidPrice is >= MinBidPrice
-- and > CurrentHighestBidPrice, if applicable
UPDATE Auction
SET CurrentHighestBidPrice = IF(CurrentHighestBidPrice IS NULL, MinBidPrice, IF(? > CurrentMaxBidPrice, LEAST(?, CurrentMaxBidPrice + BidIncrement), LEAST(? + BidIncrement, CurrentMaxBidPrice))),
    CurrentMaxBidPrice = IF(CurrentMaxBidPrice IS NULL, ?, IF(? > CurrentMaxBidPrice, ?, CurrentMaxBidPrice)),
    BidIncrement = ?,
    WinningBidID = IF(WinningBidID IS NULL, ?, IF(? > CurrentMaxBidPrice, ?, WinningBidID))
WHERE AuctionID = ?;
-- Transaction ends here




-- Logging into vendor
SELECT IF(UserPassword = ?, TRUE, FALSE) AS ValidPassword, Email, CustomerID, EmployeeID, EmployeeLevel
FROM (VendorUser LEFT JOIN Employee ON Username = EmployeeID) LEFT JOIN Customer ON Username = CustomerID
WHERE Username = ?;

